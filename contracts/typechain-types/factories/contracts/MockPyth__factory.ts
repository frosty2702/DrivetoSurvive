/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { MockPyth, MockPythInterface } from "../../contracts/MockPyth";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "priceFeedId",
        type: "bytes32",
      },
    ],
    name: "getMockUpdateFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "priceUpdateData",
        type: "bytes[]",
      },
    ],
    name: "getUpdateFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "priceFeedId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "setMockUpdateFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "priceUpdateData",
        type: "bytes[]",
      },
    ],
    name: "updatePriceFeeds",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610198908161001c8239f35b600080fdfe604060808152600436101561001357600080fd5b600090813560e01c8063aa280a3a146100ec578063d47eed45146100ca578063ef9e5e28146100755763f758b2bb1461004b57600080fd5b346100715760203660031901126100715780602092600435815280845220549051908152f35b5080fd5b5061007f36610110565b505067016345785d8a00003410610094575080f35b5162461bcd60e51b815260206004820152601060248201526f496e73756666696369656e742066656560801b6044820152606490fd5b5034610071576020906100dc36610110565b50505167016345785d8a00008152f35b50346100715780600319360112610071576004358252816020526024359082205580f35b90602060031983011261015d5760043567ffffffffffffffff9283821161015d578060238301121561015d57816004013593841161015d5760248460051b8301011161015d576024019190565b600080fdfea26469706673582212202e7da0d745903753fbdefbea402636ac4bf30bd17440865042b07379319296e064736f6c63430008140033";

type MockPythConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockPythConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockPyth__factory extends ContractFactory {
  constructor(...args: MockPythConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockPyth & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockPyth__factory {
    return super.connect(runner) as MockPyth__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockPythInterface {
    return new Interface(_abi) as MockPythInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockPyth {
    return new Contract(address, _abi, runner) as unknown as MockPyth;
  }
}
