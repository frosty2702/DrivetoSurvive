/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  MockPerformanceOracle,
  MockPerformanceOracleInterface,
} from "../../contracts/MockPerformanceOracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "driverId",
        type: "uint256",
      },
    ],
    name: "getDriverValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "driverId",
        type: "uint256",
      },
    ],
    name: "getPerformanceScore",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "driverId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "score",
        type: "uint256",
      },
    ],
    name: "setDriverScore",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "driverId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "setDriverValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100165761011d908161001c8239f35b600080fdfe608060408181526004361015601357600080fd5b600091823560e01c90816234230a1460a55750806325c52dcf14608b5780633a52ed651460665763cfa5c04f14604857600080fd5b3460625760533660cd565b91908352600160205282205580f35b5080fd5b5034606257602036600319011260625780602092600435815280845220549051908152f35b503460625760973660cd565b919083528260205282205580f35b9190503460c957602036600319011260c95760209260043581526001845220548152f35b8280fd5b604090600319011260e2576004359060243590565b600080fdfea26469706673582212203d022e53e508ab4040267a5d33000287e9869212e7bc2713f22adb04dbbff8a164736f6c63430008140033";

type MockPerformanceOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockPerformanceOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockPerformanceOracle__factory extends ContractFactory {
  constructor(...args: MockPerformanceOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockPerformanceOracle & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MockPerformanceOracle__factory {
    return super.connect(runner) as MockPerformanceOracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockPerformanceOracleInterface {
    return new Interface(_abi) as MockPerformanceOracleInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockPerformanceOracle {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MockPerformanceOracle;
  }
}
