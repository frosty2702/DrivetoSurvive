/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SponsorEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelDeal"
      | "checkAndReleaseMilestone"
      | "createDeal"
      | "deals"
      | "driverToDeals"
      | "getDeal"
      | "getDriverDeals"
      | "getMilestone"
      | "getSponsorDeals"
      | "owner"
      | "performanceOracle"
      | "renounceOwnership"
      | "sponsorToDeals"
      | "transferOwnership"
      | "updatePerformanceOracle"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DealCancelled"
      | "DealCreated"
      | "FundsReleased"
      | "MilestoneAchieved"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelDeal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAndReleaseMilestone",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createDeal",
    values: [
      BigNumberish,
      BigNumberish,
      string[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "deals", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "driverToDeals",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDriverDeals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMilestone",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSponsorDeals",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performanceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sponsorToDeals",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePerformanceOracle",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "cancelDeal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkAndReleaseMilestone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createDeal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "driverToDeals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDeal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDriverDeals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMilestone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSponsorDeals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performanceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sponsorToDeals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePerformanceOracle",
    data: BytesLike
  ): Result;
}

export namespace DealCancelledEvent {
  export type InputTuple = [dealId: BigNumberish];
  export type OutputTuple = [dealId: bigint];
  export interface OutputObject {
    dealId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DealCreatedEvent {
  export type InputTuple = [
    dealId: BigNumberish,
    sponsor: AddressLike,
    driverId: BigNumberish,
    totalAmount: BigNumberish,
    duration: BigNumberish
  ];
  export type OutputTuple = [
    dealId: bigint,
    sponsor: string,
    driverId: bigint,
    totalAmount: bigint,
    duration: bigint
  ];
  export interface OutputObject {
    dealId: bigint;
    sponsor: string;
    driverId: bigint;
    totalAmount: bigint;
    duration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsReleasedEvent {
  export type InputTuple = [
    dealId: BigNumberish,
    recipient: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [dealId: bigint, recipient: string, amount: bigint];
  export interface OutputObject {
    dealId: bigint;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MilestoneAchievedEvent {
  export type InputTuple = [
    dealId: BigNumberish,
    milestoneIndex: BigNumberish,
    payoutAmount: BigNumberish,
    driverId: BigNumberish
  ];
  export type OutputTuple = [
    dealId: bigint,
    milestoneIndex: bigint,
    payoutAmount: bigint,
    driverId: bigint
  ];
  export interface OutputObject {
    dealId: bigint;
    milestoneIndex: bigint;
    payoutAmount: bigint;
    driverId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SponsorEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): SponsorEscrow;
  waitForDeployment(): Promise<this>;

  interface: SponsorEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelDeal: TypedContractMethod<[dealId: BigNumberish], [void], "nonpayable">;

  checkAndReleaseMilestone: TypedContractMethod<
    [
      dealId: BigNumberish,
      milestoneIndex: BigNumberish,
      recipient: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  createDeal: TypedContractMethod<
    [
      driverId: BigNumberish,
      duration: BigNumberish,
      milestoneDescriptions: string[],
      payoutAmounts: BigNumberish[],
      minPerformanceScores: BigNumberish[],
      minPositions: BigNumberish[],
      minPoints: BigNumberish[]
    ],
    [bigint],
    "payable"
  >;

  deals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint, bigint, bigint, bigint] & {
        dealId: bigint;
        sponsor: string;
        driverId: bigint;
        totalAmount: bigint;
        releasedAmount: bigint;
        startTime: bigint;
        duration: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  driverToDeals: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getDeal: TypedContractMethod<
    [dealId: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint] & {
        sponsor: string;
        driverId: bigint;
        totalAmount: bigint;
        releasedAmount: bigint;
        status: bigint;
        milestoneCount: bigint;
      }
    ],
    "view"
  >;

  getDriverDeals: TypedContractMethod<
    [driverId: BigNumberish],
    [bigint[]],
    "view"
  >;

  getMilestone: TypedContractMethod<
    [dealId: BigNumberish, milestoneIndex: BigNumberish],
    [
      [string, bigint, boolean, bigint] & {
        description: string;
        payoutAmount: bigint;
        achieved: boolean;
        minPerformanceScore: bigint;
      }
    ],
    "view"
  >;

  getSponsorDeals: TypedContractMethod<
    [sponsor: AddressLike],
    [bigint[]],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  performanceOracle: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sponsorToDeals: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePerformanceOracle: TypedContractMethod<
    [_performanceOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelDeal"
  ): TypedContractMethod<[dealId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkAndReleaseMilestone"
  ): TypedContractMethod<
    [
      dealId: BigNumberish,
      milestoneIndex: BigNumberish,
      recipient: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createDeal"
  ): TypedContractMethod<
    [
      driverId: BigNumberish,
      duration: BigNumberish,
      milestoneDescriptions: string[],
      payoutAmounts: BigNumberish[],
      minPerformanceScores: BigNumberish[],
      minPositions: BigNumberish[],
      minPoints: BigNumberish[]
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "deals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint, bigint, bigint, bigint] & {
        dealId: bigint;
        sponsor: string;
        driverId: bigint;
        totalAmount: bigint;
        releasedAmount: bigint;
        startTime: bigint;
        duration: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "driverToDeals"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDeal"
  ): TypedContractMethod<
    [dealId: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint] & {
        sponsor: string;
        driverId: bigint;
        totalAmount: bigint;
        releasedAmount: bigint;
        status: bigint;
        milestoneCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDriverDeals"
  ): TypedContractMethod<[driverId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getMilestone"
  ): TypedContractMethod<
    [dealId: BigNumberish, milestoneIndex: BigNumberish],
    [
      [string, bigint, boolean, bigint] & {
        description: string;
        payoutAmount: bigint;
        achieved: boolean;
        minPerformanceScore: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSponsorDeals"
  ): TypedContractMethod<[sponsor: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "performanceOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sponsorToDeals"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePerformanceOracle"
  ): TypedContractMethod<
    [_performanceOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DealCancelled"
  ): TypedContractEvent<
    DealCancelledEvent.InputTuple,
    DealCancelledEvent.OutputTuple,
    DealCancelledEvent.OutputObject
  >;
  getEvent(
    key: "DealCreated"
  ): TypedContractEvent<
    DealCreatedEvent.InputTuple,
    DealCreatedEvent.OutputTuple,
    DealCreatedEvent.OutputObject
  >;
  getEvent(
    key: "FundsReleased"
  ): TypedContractEvent<
    FundsReleasedEvent.InputTuple,
    FundsReleasedEvent.OutputTuple,
    FundsReleasedEvent.OutputObject
  >;
  getEvent(
    key: "MilestoneAchieved"
  ): TypedContractEvent<
    MilestoneAchievedEvent.InputTuple,
    MilestoneAchievedEvent.OutputTuple,
    MilestoneAchievedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "DealCancelled(uint256)": TypedContractEvent<
      DealCancelledEvent.InputTuple,
      DealCancelledEvent.OutputTuple,
      DealCancelledEvent.OutputObject
    >;
    DealCancelled: TypedContractEvent<
      DealCancelledEvent.InputTuple,
      DealCancelledEvent.OutputTuple,
      DealCancelledEvent.OutputObject
    >;

    "DealCreated(uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      DealCreatedEvent.InputTuple,
      DealCreatedEvent.OutputTuple,
      DealCreatedEvent.OutputObject
    >;
    DealCreated: TypedContractEvent<
      DealCreatedEvent.InputTuple,
      DealCreatedEvent.OutputTuple,
      DealCreatedEvent.OutputObject
    >;

    "FundsReleased(uint256,address,uint256)": TypedContractEvent<
      FundsReleasedEvent.InputTuple,
      FundsReleasedEvent.OutputTuple,
      FundsReleasedEvent.OutputObject
    >;
    FundsReleased: TypedContractEvent<
      FundsReleasedEvent.InputTuple,
      FundsReleasedEvent.OutputTuple,
      FundsReleasedEvent.OutputObject
    >;

    "MilestoneAchieved(uint256,uint256,uint256,uint256)": TypedContractEvent<
      MilestoneAchievedEvent.InputTuple,
      MilestoneAchievedEvent.OutputTuple,
      MilestoneAchievedEvent.OutputObject
    >;
    MilestoneAchieved: TypedContractEvent<
      MilestoneAchievedEvent.InputTuple,
      MilestoneAchievedEvent.OutputTuple,
      MilestoneAchievedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
