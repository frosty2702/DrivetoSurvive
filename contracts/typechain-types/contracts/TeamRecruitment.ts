/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TeamRecruitmentInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_TOP_TIER_DRIVERS_PER_TEAM"
      | "TOP_TIER_THRESHOLD"
      | "acceptApplication"
      | "applications"
      | "applyForJob"
      | "contracts"
      | "driverNFT"
      | "driverToActiveContract"
      | "driverToApplications"
      | "getDriverApplications"
      | "getDriverContract"
      | "getJobPosting"
      | "getTeamDriverCount"
      | "getTeamJobs"
      | "jobPostings"
      | "owner"
      | "performanceOracle"
      | "postJob"
      | "rejectApplication"
      | "renounceOwnership"
      | "teamNFT"
      | "teamToContracts"
      | "teamToJobs"
      | "terminateContract"
      | "transferOwnership"
      | "updatePerformanceOracle"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ApplicationRejected"
      | "ApplicationSubmitted"
      | "ContractTerminated"
      | "DriverSigned"
      | "JobPosted"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_TOP_TIER_DRIVERS_PER_TEAM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOP_TIER_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptApplication",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "applications",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "applyForJob",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "contracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "driverNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "driverToActiveContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "driverToApplications",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDriverApplications",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDriverContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getJobPosting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTeamDriverCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTeamJobs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "jobPostings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performanceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "postJob",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectApplication",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "teamNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "teamToContracts",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "teamToJobs",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "terminateContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePerformanceOracle",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_TOP_TIER_DRIVERS_PER_TEAM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOP_TIER_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptApplication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyForJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contracts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "driverNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "driverToActiveContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "driverToApplications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDriverApplications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDriverContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJobPosting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTeamDriverCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTeamJobs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jobPostings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performanceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "postJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rejectApplication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "teamNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "teamToContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "teamToJobs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "terminateContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePerformanceOracle",
    data: BytesLike
  ): Result;
}

export namespace ApplicationRejectedEvent {
  export type InputTuple = [applicationId: BigNumberish, reason: string];
  export type OutputTuple = [applicationId: bigint, reason: string];
  export interface OutputObject {
    applicationId: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApplicationSubmittedEvent {
  export type InputTuple = [
    applicationId: BigNumberish,
    jobId: BigNumberish,
    driverId: BigNumberish
  ];
  export type OutputTuple = [
    applicationId: bigint,
    jobId: bigint,
    driverId: bigint
  ];
  export interface OutputObject {
    applicationId: bigint;
    jobId: bigint;
    driverId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractTerminatedEvent {
  export type InputTuple = [contractId: BigNumberish];
  export type OutputTuple = [contractId: bigint];
  export interface OutputObject {
    contractId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DriverSignedEvent {
  export type InputTuple = [
    contractId: BigNumberish,
    teamId: BigNumberish,
    driverId: BigNumberish,
    salary: BigNumberish
  ];
  export type OutputTuple = [
    contractId: bigint,
    teamId: bigint,
    driverId: bigint,
    salary: bigint
  ];
  export interface OutputObject {
    contractId: bigint;
    teamId: bigint;
    driverId: bigint;
    salary: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobPostedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    teamId: BigNumberish,
    minMarketValue: BigNumberish,
    minPerformanceScore: BigNumberish
  ];
  export type OutputTuple = [
    jobId: bigint,
    teamId: bigint,
    minMarketValue: bigint,
    minPerformanceScore: bigint
  ];
  export interface OutputObject {
    jobId: bigint;
    teamId: bigint;
    minMarketValue: bigint;
    minPerformanceScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TeamRecruitment extends BaseContract {
  connect(runner?: ContractRunner | null): TeamRecruitment;
  waitForDeployment(): Promise<this>;

  interface: TeamRecruitmentInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_TOP_TIER_DRIVERS_PER_TEAM: TypedContractMethod<[], [bigint], "view">;

  TOP_TIER_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  acceptApplication: TypedContractMethod<
    [applicationId: BigNumberish],
    [void],
    "nonpayable"
  >;

  applications: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, string, bigint, bigint, string] & {
        applicationId: bigint;
        jobId: bigint;
        driverId: bigint;
        driverOwner: string;
        status: bigint;
        appliedAt: bigint;
        message: string;
      }
    ],
    "view"
  >;

  applyForJob: TypedContractMethod<
    [jobId: BigNumberish, driverId: BigNumberish, message: string],
    [bigint],
    "nonpayable"
  >;

  contracts: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        contractId: bigint;
        teamId: bigint;
        driverId: bigint;
        salary: bigint;
        startTime: bigint;
        endTime: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  driverNFT: TypedContractMethod<[], [string], "view">;

  driverToActiveContract: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  driverToApplications: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getDriverApplications: TypedContractMethod<
    [driverId: BigNumberish],
    [bigint[]],
    "view"
  >;

  getDriverContract: TypedContractMethod<
    [driverId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        contractId: bigint;
        teamId: bigint;
        salary: bigint;
        endTime: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  getJobPosting: TypedContractMethod<
    [jobId: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint] & {
        teamId: bigint;
        position: string;
        minMarketValue: bigint;
        minPerformanceScore: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  getTeamDriverCount: TypedContractMethod<
    [teamId: BigNumberish],
    [[bigint, bigint] & { total: bigint; topTier: bigint }],
    "view"
  >;

  getTeamJobs: TypedContractMethod<[teamId: BigNumberish], [bigint[]], "view">;

  jobPostings: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        jobId: bigint;
        teamId: bigint;
        position: string;
        minMarketValue: bigint;
        minPerformanceScore: bigint;
        salaryOffered: bigint;
        contractLength: bigint;
        status: bigint;
        postedAt: bigint;
        filledAt: bigint;
        selectedDriverId: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  performanceOracle: TypedContractMethod<[], [string], "view">;

  postJob: TypedContractMethod<
    [
      teamId: BigNumberish,
      position: string,
      minMarketValue: BigNumberish,
      minPerformanceScore: BigNumberish,
      salaryOffered: BigNumberish,
      contractLength: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  rejectApplication: TypedContractMethod<
    [applicationId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  teamNFT: TypedContractMethod<[], [string], "view">;

  teamToContracts: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  teamToJobs: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  terminateContract: TypedContractMethod<
    [contractId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePerformanceOracle: TypedContractMethod<
    [_performanceOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_TOP_TIER_DRIVERS_PER_TEAM"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOP_TIER_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "acceptApplication"
  ): TypedContractMethod<[applicationId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "applications"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, string, bigint, bigint, string] & {
        applicationId: bigint;
        jobId: bigint;
        driverId: bigint;
        driverOwner: string;
        status: bigint;
        appliedAt: bigint;
        message: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "applyForJob"
  ): TypedContractMethod<
    [jobId: BigNumberish, driverId: BigNumberish, message: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "contracts"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        contractId: bigint;
        teamId: bigint;
        driverId: bigint;
        salary: bigint;
        startTime: bigint;
        endTime: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "driverNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "driverToActiveContract"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "driverToApplications"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDriverApplications"
  ): TypedContractMethod<[driverId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getDriverContract"
  ): TypedContractMethod<
    [driverId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        contractId: bigint;
        teamId: bigint;
        salary: bigint;
        endTime: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getJobPosting"
  ): TypedContractMethod<
    [jobId: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint] & {
        teamId: bigint;
        position: string;
        minMarketValue: bigint;
        minPerformanceScore: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTeamDriverCount"
  ): TypedContractMethod<
    [teamId: BigNumberish],
    [[bigint, bigint] & { total: bigint; topTier: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTeamJobs"
  ): TypedContractMethod<[teamId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "jobPostings"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        jobId: bigint;
        teamId: bigint;
        position: string;
        minMarketValue: bigint;
        minPerformanceScore: bigint;
        salaryOffered: bigint;
        contractLength: bigint;
        status: bigint;
        postedAt: bigint;
        filledAt: bigint;
        selectedDriverId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "performanceOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "postJob"
  ): TypedContractMethod<
    [
      teamId: BigNumberish,
      position: string,
      minMarketValue: BigNumberish,
      minPerformanceScore: BigNumberish,
      salaryOffered: BigNumberish,
      contractLength: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rejectApplication"
  ): TypedContractMethod<
    [applicationId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "teamNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "teamToContracts"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "teamToJobs"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "terminateContract"
  ): TypedContractMethod<[contractId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePerformanceOracle"
  ): TypedContractMethod<
    [_performanceOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ApplicationRejected"
  ): TypedContractEvent<
    ApplicationRejectedEvent.InputTuple,
    ApplicationRejectedEvent.OutputTuple,
    ApplicationRejectedEvent.OutputObject
  >;
  getEvent(
    key: "ApplicationSubmitted"
  ): TypedContractEvent<
    ApplicationSubmittedEvent.InputTuple,
    ApplicationSubmittedEvent.OutputTuple,
    ApplicationSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "ContractTerminated"
  ): TypedContractEvent<
    ContractTerminatedEvent.InputTuple,
    ContractTerminatedEvent.OutputTuple,
    ContractTerminatedEvent.OutputObject
  >;
  getEvent(
    key: "DriverSigned"
  ): TypedContractEvent<
    DriverSignedEvent.InputTuple,
    DriverSignedEvent.OutputTuple,
    DriverSignedEvent.OutputObject
  >;
  getEvent(
    key: "JobPosted"
  ): TypedContractEvent<
    JobPostedEvent.InputTuple,
    JobPostedEvent.OutputTuple,
    JobPostedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "ApplicationRejected(uint256,string)": TypedContractEvent<
      ApplicationRejectedEvent.InputTuple,
      ApplicationRejectedEvent.OutputTuple,
      ApplicationRejectedEvent.OutputObject
    >;
    ApplicationRejected: TypedContractEvent<
      ApplicationRejectedEvent.InputTuple,
      ApplicationRejectedEvent.OutputTuple,
      ApplicationRejectedEvent.OutputObject
    >;

    "ApplicationSubmitted(uint256,uint256,uint256)": TypedContractEvent<
      ApplicationSubmittedEvent.InputTuple,
      ApplicationSubmittedEvent.OutputTuple,
      ApplicationSubmittedEvent.OutputObject
    >;
    ApplicationSubmitted: TypedContractEvent<
      ApplicationSubmittedEvent.InputTuple,
      ApplicationSubmittedEvent.OutputTuple,
      ApplicationSubmittedEvent.OutputObject
    >;

    "ContractTerminated(uint256)": TypedContractEvent<
      ContractTerminatedEvent.InputTuple,
      ContractTerminatedEvent.OutputTuple,
      ContractTerminatedEvent.OutputObject
    >;
    ContractTerminated: TypedContractEvent<
      ContractTerminatedEvent.InputTuple,
      ContractTerminatedEvent.OutputTuple,
      ContractTerminatedEvent.OutputObject
    >;

    "DriverSigned(uint256,uint256,uint256,uint256)": TypedContractEvent<
      DriverSignedEvent.InputTuple,
      DriverSignedEvent.OutputTuple,
      DriverSignedEvent.OutputObject
    >;
    DriverSigned: TypedContractEvent<
      DriverSignedEvent.InputTuple,
      DriverSignedEvent.OutputTuple,
      DriverSignedEvent.OutputObject
    >;

    "JobPosted(uint256,uint256,uint256,uint256)": TypedContractEvent<
      JobPostedEvent.InputTuple,
      JobPostedEvent.OutputTuple,
      JobPostedEvent.OutputObject
    >;
    JobPosted: TypedContractEvent<
      JobPostedEvent.InputTuple,
      JobPostedEvent.OutputTuple,
      JobPostedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
