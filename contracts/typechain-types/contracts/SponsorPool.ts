/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SponsorPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "HHI_THRESHOLD"
      | "addAuthorizedToken"
      | "authorizedTokens"
      | "createPool"
      | "depositToPool"
      | "getConcentration"
      | "getPoolData"
      | "getSponsorData"
      | "nextPoolId"
      | "owner"
      | "pools"
      | "removeAuthorizedToken"
      | "renounceOwnership"
      | "transferOwnership"
      | "withdrawFromPool"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ConcentrationWarning"
      | "OwnershipTransferred"
      | "PoolCreated"
      | "SponsorDeposit"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "HHI_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAuthorizedToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToPool",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getConcentration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSponsorData",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextPoolId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pools", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "removeAuthorizedToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromPool",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "HHI_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAuthorizedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositToPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConcentration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSponsorData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextPoolId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorizedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromPool",
    data: BytesLike
  ): Result;
}

export namespace ConcentrationWarningEvent {
  export type InputTuple = [
    poolId: BigNumberish,
    hhi: BigNumberish,
    threshold: BigNumberish
  ];
  export type OutputTuple = [poolId: bigint, hhi: bigint, threshold: bigint];
  export interface OutputObject {
    poolId: bigint;
    hhi: bigint;
    threshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolCreatedEvent {
  export type InputTuple = [
    poolId: BigNumberish,
    maxConcentration: BigNumberish
  ];
  export type OutputTuple = [poolId: bigint, maxConcentration: bigint];
  export interface OutputObject {
    poolId: bigint;
    maxConcentration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SponsorDepositEvent {
  export type InputTuple = [
    poolId: BigNumberish,
    sponsor: AddressLike,
    amount: BigNumberish,
    newHHI: BigNumberish
  ];
  export type OutputTuple = [
    poolId: bigint,
    sponsor: string,
    amount: bigint,
    newHHI: bigint
  ];
  export interface OutputObject {
    poolId: bigint;
    sponsor: string;
    amount: bigint;
    newHHI: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SponsorPool extends BaseContract {
  connect(runner?: ContractRunner | null): SponsorPool;
  waitForDeployment(): Promise<this>;

  interface: SponsorPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  HHI_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  addAuthorizedToken: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizedTokens: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  createPool: TypedContractMethod<
    [maxConcentration: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  depositToPool: TypedContractMethod<
    [poolId: BigNumberish, token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getConcentration: TypedContractMethod<
    [poolId: BigNumberish],
    [
      [bigint, boolean, bigint] & {
        hhi: bigint;
        isConcentrated: boolean;
        threshold: bigint;
      }
    ],
    "view"
  >;

  getPoolData: TypedContractMethod<
    [poolId: BigNumberish],
    [
      [bigint, bigint, boolean, bigint] & {
        totalDeposits: bigint;
        maxConcentration: bigint;
        isActive: boolean;
        sponsorCount: bigint;
      }
    ],
    "view"
  >;

  getSponsorData: TypedContractMethod<
    [poolId: BigNumberish, sponsor: AddressLike],
    [[bigint, bigint] & { depositAmount: bigint; percentageShare: bigint }],
    "view"
  >;

  nextPoolId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pools: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, boolean] & {
        totalDeposits: bigint;
        maxConcentration: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  removeAuthorizedToken: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawFromPool: TypedContractMethod<
    [poolId: BigNumberish, token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "HHI_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addAuthorizedToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedTokens"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "createPool"
  ): TypedContractMethod<
    [maxConcentration: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositToPool"
  ): TypedContractMethod<
    [poolId: BigNumberish, token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getConcentration"
  ): TypedContractMethod<
    [poolId: BigNumberish],
    [
      [bigint, boolean, bigint] & {
        hhi: bigint;
        isConcentrated: boolean;
        threshold: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolData"
  ): TypedContractMethod<
    [poolId: BigNumberish],
    [
      [bigint, bigint, boolean, bigint] & {
        totalDeposits: bigint;
        maxConcentration: bigint;
        isActive: boolean;
        sponsorCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSponsorData"
  ): TypedContractMethod<
    [poolId: BigNumberish, sponsor: AddressLike],
    [[bigint, bigint] & { depositAmount: bigint; percentageShare: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextPoolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pools"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, boolean] & {
        totalDeposits: bigint;
        maxConcentration: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeAuthorizedToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawFromPool"
  ): TypedContractMethod<
    [poolId: BigNumberish, token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ConcentrationWarning"
  ): TypedContractEvent<
    ConcentrationWarningEvent.InputTuple,
    ConcentrationWarningEvent.OutputTuple,
    ConcentrationWarningEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PoolCreated"
  ): TypedContractEvent<
    PoolCreatedEvent.InputTuple,
    PoolCreatedEvent.OutputTuple,
    PoolCreatedEvent.OutputObject
  >;
  getEvent(
    key: "SponsorDeposit"
  ): TypedContractEvent<
    SponsorDepositEvent.InputTuple,
    SponsorDepositEvent.OutputTuple,
    SponsorDepositEvent.OutputObject
  >;

  filters: {
    "ConcentrationWarning(uint256,uint256,uint256)": TypedContractEvent<
      ConcentrationWarningEvent.InputTuple,
      ConcentrationWarningEvent.OutputTuple,
      ConcentrationWarningEvent.OutputObject
    >;
    ConcentrationWarning: TypedContractEvent<
      ConcentrationWarningEvent.InputTuple,
      ConcentrationWarningEvent.OutputTuple,
      ConcentrationWarningEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PoolCreated(uint256,uint256)": TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;
    PoolCreated: TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;

    "SponsorDeposit(uint256,address,uint256,uint256)": TypedContractEvent<
      SponsorDepositEvent.InputTuple,
      SponsorDepositEvent.OutputTuple,
      SponsorDepositEvent.OutputObject
    >;
    SponsorDeposit: TypedContractEvent<
      SponsorDepositEvent.InputTuple,
      SponsorDepositEvent.OutputTuple,
      SponsorDepositEvent.OutputObject
    >;
  };
}
