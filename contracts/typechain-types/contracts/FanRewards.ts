/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FanRewardsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "PERFORMANCE_MULTIPLIER"
      | "POINTS_PER_DAY"
      | "addReward"
      | "checkPrediction"
      | "driverNFT"
      | "fanProfiles"
      | "getFanProfile"
      | "getReward"
      | "getStakeInfo"
      | "hasWatchedRace"
      | "makePrediction"
      | "owner"
      | "performanceOracle"
      | "racePredictions"
      | "recordRaceWatch"
      | "redeemReward"
      | "renounceOwnership"
      | "rewards"
      | "stakeNFT"
      | "stakedNFTs"
      | "transferOwnership"
      | "unstakeNFT"
      | "updatePerformanceOracle"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "NFTStaked"
      | "NFTUnstaked"
      | "OwnershipTransferred"
      | "PointsEarned"
      | "PredictionMade"
      | "RaceWatched"
      | "RewardRedeemed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "PERFORMANCE_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POINTS_PER_DAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addReward",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkPrediction",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "driverNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fanProfiles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFanProfile",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasWatchedRace",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makePrediction",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performanceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "racePredictions",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recordRaceWatch",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedNFTs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePerformanceOracle",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "PERFORMANCE_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POINTS_PER_DAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkPrediction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "driverNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fanProfiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFanProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStakeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasWatchedRace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makePrediction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performanceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "racePredictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordRaceWatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakedNFTs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstakeNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePerformanceOracle",
    data: BytesLike
  ): Result;
}

export namespace NFTStakedEvent {
  export type InputTuple = [fan: AddressLike, driverId: BigNumberish];
  export type OutputTuple = [fan: string, driverId: bigint];
  export interface OutputObject {
    fan: string;
    driverId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTUnstakedEvent {
  export type InputTuple = [
    fan: AddressLike,
    driverId: BigNumberish,
    pointsEarned: BigNumberish
  ];
  export type OutputTuple = [
    fan: string,
    driverId: bigint,
    pointsEarned: bigint
  ];
  export interface OutputObject {
    fan: string;
    driverId: bigint;
    pointsEarned: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PointsEarnedEvent {
  export type InputTuple = [
    fan: AddressLike,
    points: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [fan: string, points: bigint, reason: string];
  export interface OutputObject {
    fan: string;
    points: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PredictionMadeEvent {
  export type InputTuple = [
    fan: AddressLike,
    raceId: BigNumberish,
    predictedPosition: BigNumberish
  ];
  export type OutputTuple = [
    fan: string,
    raceId: bigint,
    predictedPosition: bigint
  ];
  export interface OutputObject {
    fan: string;
    raceId: bigint;
    predictedPosition: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RaceWatchedEvent {
  export type InputTuple = [fan: AddressLike, raceId: BigNumberish];
  export type OutputTuple = [fan: string, raceId: bigint];
  export interface OutputObject {
    fan: string;
    raceId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardRedeemedEvent {
  export type InputTuple = [
    fan: AddressLike,
    rewardId: BigNumberish,
    pointsSpent: BigNumberish
  ];
  export type OutputTuple = [
    fan: string,
    rewardId: bigint,
    pointsSpent: bigint
  ];
  export interface OutputObject {
    fan: string;
    rewardId: bigint;
    pointsSpent: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FanRewards extends BaseContract {
  connect(runner?: ContractRunner | null): FanRewards;
  waitForDeployment(): Promise<this>;

  interface: FanRewardsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  PERFORMANCE_MULTIPLIER: TypedContractMethod<[], [bigint], "view">;

  POINTS_PER_DAY: TypedContractMethod<[], [bigint], "view">;

  addReward: TypedContractMethod<
    [
      name: string,
      description: string,
      pointsCost: BigNumberish,
      available: BigNumberish,
      rewardType: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  checkPrediction: TypedContractMethod<
    [fan: AddressLike, raceId: BigNumberish, actualPosition: BigNumberish],
    [void],
    "nonpayable"
  >;

  driverNFT: TypedContractMethod<[], [string], "view">;

  fanProfiles: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        totalPoints: bigint;
        totalStaked: bigint;
        rewardsRedeemed: bigint;
        lastActivityAt: bigint;
      }
    ],
    "view"
  >;

  getFanProfile: TypedContractMethod<
    [fan: AddressLike],
    [
      [bigint, bigint, bigint, bigint[]] & {
        totalPoints: bigint;
        totalStaked: bigint;
        rewardsRedeemed: bigint;
        stakedDrivers: bigint[];
      }
    ],
    "view"
  >;

  getReward: TypedContractMethod<
    [rewardId: BigNumberish],
    [
      [string, string, bigint, bigint, boolean] & {
        name: string;
        description: string;
        pointsCost: bigint;
        available: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  getStakeInfo: TypedContractMethod<
    [driverId: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        owner: string;
        stakedAt: bigint;
        estimatedPoints: bigint;
        isStaked: boolean;
      }
    ],
    "view"
  >;

  hasWatchedRace: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  makePrediction: TypedContractMethod<
    [
      raceId: BigNumberish,
      driverId: BigNumberish,
      predictedPosition: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  performanceOracle: TypedContractMethod<[], [string], "view">;

  racePredictions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  recordRaceWatch: TypedContractMethod<
    [fan: AddressLike, raceId: BigNumberish],
    [void],
    "nonpayable"
  >;

  redeemReward: TypedContractMethod<
    [rewardId: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewards: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, boolean, bigint] & {
        rewardId: bigint;
        name: string;
        description: string;
        pointsCost: bigint;
        available: bigint;
        active: boolean;
        rewardType: bigint;
      }
    ],
    "view"
  >;

  stakeNFT: TypedContractMethod<[driverId: BigNumberish], [void], "nonpayable">;

  stakedNFTs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean] & {
        driverId: bigint;
        owner: string;
        stakedAt: bigint;
        pointsEarned: bigint;
        isStaked: boolean;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unstakeNFT: TypedContractMethod<
    [driverId: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePerformanceOracle: TypedContractMethod<
    [_performanceOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "PERFORMANCE_MULTIPLIER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "POINTS_PER_DAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addReward"
  ): TypedContractMethod<
    [
      name: string,
      description: string,
      pointsCost: BigNumberish,
      available: BigNumberish,
      rewardType: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkPrediction"
  ): TypedContractMethod<
    [fan: AddressLike, raceId: BigNumberish, actualPosition: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "driverNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fanProfiles"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        totalPoints: bigint;
        totalStaked: bigint;
        rewardsRedeemed: bigint;
        lastActivityAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFanProfile"
  ): TypedContractMethod<
    [fan: AddressLike],
    [
      [bigint, bigint, bigint, bigint[]] & {
        totalPoints: bigint;
        totalStaked: bigint;
        rewardsRedeemed: bigint;
        stakedDrivers: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReward"
  ): TypedContractMethod<
    [rewardId: BigNumberish],
    [
      [string, string, bigint, bigint, boolean] & {
        name: string;
        description: string;
        pointsCost: bigint;
        available: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStakeInfo"
  ): TypedContractMethod<
    [driverId: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        owner: string;
        stakedAt: bigint;
        estimatedPoints: bigint;
        isStaked: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasWatchedRace"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "makePrediction"
  ): TypedContractMethod<
    [
      raceId: BigNumberish,
      driverId: BigNumberish,
      predictedPosition: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "performanceOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "racePredictions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "recordRaceWatch"
  ): TypedContractMethod<
    [fan: AddressLike, raceId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemReward"
  ): TypedContractMethod<[rewardId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewards"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, boolean, bigint] & {
        rewardId: bigint;
        name: string;
        description: string;
        pointsCost: bigint;
        available: bigint;
        active: boolean;
        rewardType: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "stakeNFT"
  ): TypedContractMethod<[driverId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stakedNFTs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean] & {
        driverId: bigint;
        owner: string;
        stakedAt: bigint;
        pointsEarned: bigint;
        isStaked: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unstakeNFT"
  ): TypedContractMethod<[driverId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePerformanceOracle"
  ): TypedContractMethod<
    [_performanceOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "NFTStaked"
  ): TypedContractEvent<
    NFTStakedEvent.InputTuple,
    NFTStakedEvent.OutputTuple,
    NFTStakedEvent.OutputObject
  >;
  getEvent(
    key: "NFTUnstaked"
  ): TypedContractEvent<
    NFTUnstakedEvent.InputTuple,
    NFTUnstakedEvent.OutputTuple,
    NFTUnstakedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PointsEarned"
  ): TypedContractEvent<
    PointsEarnedEvent.InputTuple,
    PointsEarnedEvent.OutputTuple,
    PointsEarnedEvent.OutputObject
  >;
  getEvent(
    key: "PredictionMade"
  ): TypedContractEvent<
    PredictionMadeEvent.InputTuple,
    PredictionMadeEvent.OutputTuple,
    PredictionMadeEvent.OutputObject
  >;
  getEvent(
    key: "RaceWatched"
  ): TypedContractEvent<
    RaceWatchedEvent.InputTuple,
    RaceWatchedEvent.OutputTuple,
    RaceWatchedEvent.OutputObject
  >;
  getEvent(
    key: "RewardRedeemed"
  ): TypedContractEvent<
    RewardRedeemedEvent.InputTuple,
    RewardRedeemedEvent.OutputTuple,
    RewardRedeemedEvent.OutputObject
  >;

  filters: {
    "NFTStaked(address,uint256)": TypedContractEvent<
      NFTStakedEvent.InputTuple,
      NFTStakedEvent.OutputTuple,
      NFTStakedEvent.OutputObject
    >;
    NFTStaked: TypedContractEvent<
      NFTStakedEvent.InputTuple,
      NFTStakedEvent.OutputTuple,
      NFTStakedEvent.OutputObject
    >;

    "NFTUnstaked(address,uint256,uint256)": TypedContractEvent<
      NFTUnstakedEvent.InputTuple,
      NFTUnstakedEvent.OutputTuple,
      NFTUnstakedEvent.OutputObject
    >;
    NFTUnstaked: TypedContractEvent<
      NFTUnstakedEvent.InputTuple,
      NFTUnstakedEvent.OutputTuple,
      NFTUnstakedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PointsEarned(address,uint256,string)": TypedContractEvent<
      PointsEarnedEvent.InputTuple,
      PointsEarnedEvent.OutputTuple,
      PointsEarnedEvent.OutputObject
    >;
    PointsEarned: TypedContractEvent<
      PointsEarnedEvent.InputTuple,
      PointsEarnedEvent.OutputTuple,
      PointsEarnedEvent.OutputObject
    >;

    "PredictionMade(address,uint256,uint256)": TypedContractEvent<
      PredictionMadeEvent.InputTuple,
      PredictionMadeEvent.OutputTuple,
      PredictionMadeEvent.OutputObject
    >;
    PredictionMade: TypedContractEvent<
      PredictionMadeEvent.InputTuple,
      PredictionMadeEvent.OutputTuple,
      PredictionMadeEvent.OutputObject
    >;

    "RaceWatched(address,uint256)": TypedContractEvent<
      RaceWatchedEvent.InputTuple,
      RaceWatchedEvent.OutputTuple,
      RaceWatchedEvent.OutputObject
    >;
    RaceWatched: TypedContractEvent<
      RaceWatchedEvent.InputTuple,
      RaceWatchedEvent.OutputTuple,
      RaceWatchedEvent.OutputObject
    >;

    "RewardRedeemed(address,uint256,uint256)": TypedContractEvent<
      RewardRedeemedEvent.InputTuple,
      RewardRedeemedEvent.OutputTuple,
      RewardRedeemedEvent.OutputObject
    >;
    RewardRedeemed: TypedContractEvent<
      RewardRedeemedEvent.InputTuple,
      RewardRedeemedEvent.OutputTuple,
      RewardRedeemedEvent.OutputObject
    >;
  };
}
