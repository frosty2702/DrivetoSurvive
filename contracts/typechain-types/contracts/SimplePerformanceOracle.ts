/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace SimplePerformanceOracle {
  export type PerformanceDataStruct = {
    raceId: BigNumberish;
    lapTime: BigNumberish;
    avgSpeed: BigNumberish;
    position: BigNumberish;
    overtakes: BigNumberish;
    points: BigNumberish;
    consistencyScore: BigNumberish;
    timestamp: BigNumberish;
  };

  export type PerformanceDataStructOutput = [
    raceId: bigint,
    lapTime: bigint,
    avgSpeed: bigint,
    position: bigint,
    overtakes: bigint,
    points: bigint,
    consistencyScore: bigint,
    timestamp: bigint
  ] & {
    raceId: bigint;
    lapTime: bigint;
    avgSpeed: bigint;
    position: bigint;
    overtakes: bigint;
    points: bigint;
    consistencyScore: bigint;
    timestamp: bigint;
  };
}

export interface SimplePerformanceOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAuthorizedUpdater"
      | "authorizedUpdaters"
      | "batchRecordPerformance"
      | "driverMarketValue"
      | "driverPerformance"
      | "driverPerformanceScore"
      | "getMarketValue"
      | "getPerformanceData"
      | "getPerformanceScore"
      | "owner"
      | "recordPerformance"
      | "removeAuthorizedUpdater"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MarketValueUpdated"
      | "OwnershipTransferred"
      | "PerformanceUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAuthorizedUpdater",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedUpdaters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchRecordPerformance",
    values: [
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "driverMarketValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "driverPerformance",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "driverPerformanceScore",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPerformanceData",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPerformanceScore",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recordPerformance",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthorizedUpdater",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAuthorizedUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedUpdaters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchRecordPerformance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "driverMarketValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "driverPerformance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "driverPerformanceScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPerformanceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPerformanceScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordPerformance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorizedUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace MarketValueUpdatedEvent {
  export type InputTuple = [
    driverId: BigNumberish,
    newMarketValue: BigNumberish
  ];
  export type OutputTuple = [driverId: bigint, newMarketValue: bigint];
  export interface OutputObject {
    driverId: bigint;
    newMarketValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PerformanceUpdatedEvent {
  export type InputTuple = [
    driverId: BigNumberish,
    raceId: BigNumberish,
    newMarketValue: BigNumberish,
    newPerformanceScore: BigNumberish
  ];
  export type OutputTuple = [
    driverId: bigint,
    raceId: bigint,
    newMarketValue: bigint,
    newPerformanceScore: bigint
  ];
  export interface OutputObject {
    driverId: bigint;
    raceId: bigint;
    newMarketValue: bigint;
    newPerformanceScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SimplePerformanceOracle extends BaseContract {
  connect(runner?: ContractRunner | null): SimplePerformanceOracle;
  waitForDeployment(): Promise<this>;

  interface: SimplePerformanceOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAuthorizedUpdater: TypedContractMethod<
    [updater: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizedUpdaters: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  batchRecordPerformance: TypedContractMethod<
    [
      driverIds: BigNumberish[],
      raceIds: BigNumberish[],
      lapTimes: BigNumberish[],
      avgSpeeds: BigNumberish[],
      positions: BigNumberish[],
      overtakes: BigNumberish[],
      points: BigNumberish[],
      consistencyScores: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  driverMarketValue: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  driverPerformance: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        raceId: bigint;
        lapTime: bigint;
        avgSpeed: bigint;
        position: bigint;
        overtakes: bigint;
        points: bigint;
        consistencyScore: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  driverPerformanceScore: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  getMarketValue: TypedContractMethod<
    [driverId: BigNumberish],
    [bigint],
    "view"
  >;

  getPerformanceData: TypedContractMethod<
    [driverId: BigNumberish, raceId: BigNumberish],
    [SimplePerformanceOracle.PerformanceDataStructOutput],
    "view"
  >;

  getPerformanceScore: TypedContractMethod<
    [driverId: BigNumberish],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  recordPerformance: TypedContractMethod<
    [
      driverId: BigNumberish,
      raceId: BigNumberish,
      lapTime: BigNumberish,
      avgSpeed: BigNumberish,
      position: BigNumberish,
      overtakes: BigNumberish,
      points: BigNumberish,
      consistencyScore: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  removeAuthorizedUpdater: TypedContractMethod<
    [updater: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAuthorizedUpdater"
  ): TypedContractMethod<[updater: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedUpdaters"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "batchRecordPerformance"
  ): TypedContractMethod<
    [
      driverIds: BigNumberish[],
      raceIds: BigNumberish[],
      lapTimes: BigNumberish[],
      avgSpeeds: BigNumberish[],
      positions: BigNumberish[],
      overtakes: BigNumberish[],
      points: BigNumberish[],
      consistencyScores: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "driverMarketValue"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "driverPerformance"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        raceId: bigint;
        lapTime: bigint;
        avgSpeed: bigint;
        position: bigint;
        overtakes: bigint;
        points: bigint;
        consistencyScore: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "driverPerformanceScore"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMarketValue"
  ): TypedContractMethod<[driverId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPerformanceData"
  ): TypedContractMethod<
    [driverId: BigNumberish, raceId: BigNumberish],
    [SimplePerformanceOracle.PerformanceDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPerformanceScore"
  ): TypedContractMethod<[driverId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recordPerformance"
  ): TypedContractMethod<
    [
      driverId: BigNumberish,
      raceId: BigNumberish,
      lapTime: BigNumberish,
      avgSpeed: BigNumberish,
      position: BigNumberish,
      overtakes: BigNumberish,
      points: BigNumberish,
      consistencyScore: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeAuthorizedUpdater"
  ): TypedContractMethod<[updater: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "MarketValueUpdated"
  ): TypedContractEvent<
    MarketValueUpdatedEvent.InputTuple,
    MarketValueUpdatedEvent.OutputTuple,
    MarketValueUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PerformanceUpdated"
  ): TypedContractEvent<
    PerformanceUpdatedEvent.InputTuple,
    PerformanceUpdatedEvent.OutputTuple,
    PerformanceUpdatedEvent.OutputObject
  >;

  filters: {
    "MarketValueUpdated(uint256,uint256)": TypedContractEvent<
      MarketValueUpdatedEvent.InputTuple,
      MarketValueUpdatedEvent.OutputTuple,
      MarketValueUpdatedEvent.OutputObject
    >;
    MarketValueUpdated: TypedContractEvent<
      MarketValueUpdatedEvent.InputTuple,
      MarketValueUpdatedEvent.OutputTuple,
      MarketValueUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PerformanceUpdated(uint256,uint256,uint256,uint256)": TypedContractEvent<
      PerformanceUpdatedEvent.InputTuple,
      PerformanceUpdatedEvent.OutputTuple,
      PerformanceUpdatedEvent.OutputObject
    >;
    PerformanceUpdated: TypedContractEvent<
      PerformanceUpdatedEvent.InputTuple,
      PerformanceUpdatedEvent.OutputTuple,
      PerformanceUpdatedEvent.OutputObject
    >;
  };
}
