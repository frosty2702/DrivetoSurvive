/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FinancialFairPlayInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BUDGET_CAP"
      | "LUXURY_TAX_RATE"
      | "LUXURY_TAX_THRESHOLD"
      | "MAX_DRIVER_SALARY"
      | "MAX_ROSTER_VALUE"
      | "SALARY_CAP"
      | "auditTeam"
      | "calculateLuxuryTax"
      | "calculateRosterValue"
      | "canSignDriver"
      | "driverSalaries"
      | "getDriverSalary"
      | "getRemainingCapSpace"
      | "getTeamFinancials"
      | "getTeamViolations"
      | "getViolation"
      | "owner"
      | "payViolation"
      | "performanceOracle"
      | "registerDriverSalary"
      | "renounceOwnership"
      | "teamFinancials"
      | "teamNFT"
      | "teamToViolations"
      | "transferOwnership"
      | "updatePerformanceOracle"
      | "violations"
      | "withdrawPenalties"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ComplianceViolation"
      | "FinancialsUpdated"
      | "LuxuryTaxAssessed"
      | "OwnershipTransferred"
      | "SalaryCapped"
      | "ViolationPaid"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BUDGET_CAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LUXURY_TAX_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LUXURY_TAX_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_DRIVER_SALARY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ROSTER_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SALARY_CAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auditTeam",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateLuxuryTax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRosterValue",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "canSignDriver",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "driverSalaries",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDriverSalary",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingCapSpace",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTeamFinancials",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTeamViolations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getViolation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payViolation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "performanceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerDriverSalary",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "teamFinancials",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "teamNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "teamToViolations",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePerformanceOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "violations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPenalties",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "BUDGET_CAP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LUXURY_TAX_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LUXURY_TAX_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_DRIVER_SALARY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ROSTER_VALUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SALARY_CAP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "auditTeam", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateLuxuryTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRosterValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canSignDriver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "driverSalaries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDriverSalary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingCapSpace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTeamFinancials",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTeamViolations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getViolation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payViolation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performanceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDriverSalary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "teamFinancials",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "teamNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "teamToViolations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePerformanceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "violations", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPenalties",
    data: BytesLike
  ): Result;
}

export namespace ComplianceViolationEvent {
  export type InputTuple = [
    teamId: BigNumberish,
    reason: string,
    penalty: BigNumberish
  ];
  export type OutputTuple = [teamId: bigint, reason: string, penalty: bigint];
  export interface OutputObject {
    teamId: bigint;
    reason: string;
    penalty: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FinancialsUpdatedEvent {
  export type InputTuple = [
    teamId: BigNumberish,
    totalSalary: BigNumberish,
    totalRosterValue: BigNumberish
  ];
  export type OutputTuple = [
    teamId: bigint,
    totalSalary: bigint,
    totalRosterValue: bigint
  ];
  export interface OutputObject {
    teamId: bigint;
    totalSalary: bigint;
    totalRosterValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LuxuryTaxAssessedEvent {
  export type InputTuple = [teamId: BigNumberish, taxAmount: BigNumberish];
  export type OutputTuple = [teamId: bigint, taxAmount: bigint];
  export interface OutputObject {
    teamId: bigint;
    taxAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SalaryCappedEvent {
  export type InputTuple = [
    teamId: BigNumberish,
    attemptedSalary: BigNumberish,
    maxAllowed: BigNumberish
  ];
  export type OutputTuple = [
    teamId: bigint,
    attemptedSalary: bigint,
    maxAllowed: bigint
  ];
  export interface OutputObject {
    teamId: bigint;
    attemptedSalary: bigint;
    maxAllowed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ViolationPaidEvent {
  export type InputTuple = [violationId: BigNumberish, teamId: BigNumberish];
  export type OutputTuple = [violationId: bigint, teamId: bigint];
  export interface OutputObject {
    violationId: bigint;
    teamId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FinancialFairPlay extends BaseContract {
  connect(runner?: ContractRunner | null): FinancialFairPlay;
  waitForDeployment(): Promise<this>;

  interface: FinancialFairPlayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BUDGET_CAP: TypedContractMethod<[], [bigint], "view">;

  LUXURY_TAX_RATE: TypedContractMethod<[], [bigint], "view">;

  LUXURY_TAX_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  MAX_DRIVER_SALARY: TypedContractMethod<[], [bigint], "view">;

  MAX_ROSTER_VALUE: TypedContractMethod<[], [bigint], "view">;

  SALARY_CAP: TypedContractMethod<[], [bigint], "view">;

  auditTeam: TypedContractMethod<
    [teamId: BigNumberish, driverIds: BigNumberish[]],
    [boolean],
    "nonpayable"
  >;

  calculateLuxuryTax: TypedContractMethod<
    [teamId: BigNumberish],
    [bigint],
    "view"
  >;

  calculateRosterValue: TypedContractMethod<
    [teamId: BigNumberish, driverIds: BigNumberish[]],
    [bigint],
    "nonpayable"
  >;

  canSignDriver: TypedContractMethod<
    [
      teamId: BigNumberish,
      driverId: BigNumberish,
      proposedSalary: BigNumberish
    ],
    [[boolean, string]],
    "view"
  >;

  driverSalaries: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getDriverSalary: TypedContractMethod<
    [teamId: BigNumberish, driverId: BigNumberish],
    [bigint],
    "view"
  >;

  getRemainingCapSpace: TypedContractMethod<
    [teamId: BigNumberish],
    [[bigint, bigint] & { salaryCapSpace: bigint; rosterValueSpace: bigint }],
    "view"
  >;

  getTeamFinancials: TypedContractMethod<
    [teamId: BigNumberish],
    [
      [bigint, bigint, bigint, boolean, bigint] & {
        totalSalary: bigint;
        totalRosterValue: bigint;
        luxuryTaxOwed: bigint;
        inCompliance: boolean;
        violationCount: bigint;
      }
    ],
    "view"
  >;

  getTeamViolations: TypedContractMethod<
    [teamId: BigNumberish],
    [bigint[]],
    "view"
  >;

  getViolation: TypedContractMethod<
    [violationId: BigNumberish],
    [
      [bigint, string, bigint, boolean] & {
        teamId: bigint;
        reason: string;
        penalty: bigint;
        paid: boolean;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  payViolation: TypedContractMethod<
    [violationId: BigNumberish],
    [void],
    "payable"
  >;

  performanceOracle: TypedContractMethod<[], [string], "view">;

  registerDriverSalary: TypedContractMethod<
    [teamId: BigNumberish, driverId: BigNumberish, salary: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  teamFinancials: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean, bigint] & {
        teamId: bigint;
        totalSalary: bigint;
        totalRosterValue: bigint;
        luxuryTaxOwed: bigint;
        lastAuditTime: bigint;
        inCompliance: boolean;
        violations: bigint;
      }
    ],
    "view"
  >;

  teamNFT: TypedContractMethod<[], [string], "view">;

  teamToViolations: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePerformanceOracle: TypedContractMethod<
    [_performanceOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  violations: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint, boolean] & {
        violationId: bigint;
        teamId: bigint;
        reason: string;
        penalty: bigint;
        timestamp: bigint;
        paid: boolean;
      }
    ],
    "view"
  >;

  withdrawPenalties: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BUDGET_CAP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LUXURY_TAX_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LUXURY_TAX_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_DRIVER_SALARY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_ROSTER_VALUE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SALARY_CAP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "auditTeam"
  ): TypedContractMethod<
    [teamId: BigNumberish, driverIds: BigNumberish[]],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateLuxuryTax"
  ): TypedContractMethod<[teamId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateRosterValue"
  ): TypedContractMethod<
    [teamId: BigNumberish, driverIds: BigNumberish[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "canSignDriver"
  ): TypedContractMethod<
    [
      teamId: BigNumberish,
      driverId: BigNumberish,
      proposedSalary: BigNumberish
    ],
    [[boolean, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "driverSalaries"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDriverSalary"
  ): TypedContractMethod<
    [teamId: BigNumberish, driverId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRemainingCapSpace"
  ): TypedContractMethod<
    [teamId: BigNumberish],
    [[bigint, bigint] & { salaryCapSpace: bigint; rosterValueSpace: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTeamFinancials"
  ): TypedContractMethod<
    [teamId: BigNumberish],
    [
      [bigint, bigint, bigint, boolean, bigint] & {
        totalSalary: bigint;
        totalRosterValue: bigint;
        luxuryTaxOwed: bigint;
        inCompliance: boolean;
        violationCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTeamViolations"
  ): TypedContractMethod<[teamId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getViolation"
  ): TypedContractMethod<
    [violationId: BigNumberish],
    [
      [bigint, string, bigint, boolean] & {
        teamId: bigint;
        reason: string;
        penalty: bigint;
        paid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payViolation"
  ): TypedContractMethod<[violationId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "performanceOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerDriverSalary"
  ): TypedContractMethod<
    [teamId: BigNumberish, driverId: BigNumberish, salary: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "teamFinancials"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean, bigint] & {
        teamId: bigint;
        totalSalary: bigint;
        totalRosterValue: bigint;
        luxuryTaxOwed: bigint;
        lastAuditTime: bigint;
        inCompliance: boolean;
        violations: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "teamNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "teamToViolations"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePerformanceOracle"
  ): TypedContractMethod<
    [_performanceOracle: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "violations"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint, boolean] & {
        violationId: bigint;
        teamId: bigint;
        reason: string;
        penalty: bigint;
        timestamp: bigint;
        paid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawPenalties"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "ComplianceViolation"
  ): TypedContractEvent<
    ComplianceViolationEvent.InputTuple,
    ComplianceViolationEvent.OutputTuple,
    ComplianceViolationEvent.OutputObject
  >;
  getEvent(
    key: "FinancialsUpdated"
  ): TypedContractEvent<
    FinancialsUpdatedEvent.InputTuple,
    FinancialsUpdatedEvent.OutputTuple,
    FinancialsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "LuxuryTaxAssessed"
  ): TypedContractEvent<
    LuxuryTaxAssessedEvent.InputTuple,
    LuxuryTaxAssessedEvent.OutputTuple,
    LuxuryTaxAssessedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SalaryCapped"
  ): TypedContractEvent<
    SalaryCappedEvent.InputTuple,
    SalaryCappedEvent.OutputTuple,
    SalaryCappedEvent.OutputObject
  >;
  getEvent(
    key: "ViolationPaid"
  ): TypedContractEvent<
    ViolationPaidEvent.InputTuple,
    ViolationPaidEvent.OutputTuple,
    ViolationPaidEvent.OutputObject
  >;

  filters: {
    "ComplianceViolation(uint256,string,uint256)": TypedContractEvent<
      ComplianceViolationEvent.InputTuple,
      ComplianceViolationEvent.OutputTuple,
      ComplianceViolationEvent.OutputObject
    >;
    ComplianceViolation: TypedContractEvent<
      ComplianceViolationEvent.InputTuple,
      ComplianceViolationEvent.OutputTuple,
      ComplianceViolationEvent.OutputObject
    >;

    "FinancialsUpdated(uint256,uint256,uint256)": TypedContractEvent<
      FinancialsUpdatedEvent.InputTuple,
      FinancialsUpdatedEvent.OutputTuple,
      FinancialsUpdatedEvent.OutputObject
    >;
    FinancialsUpdated: TypedContractEvent<
      FinancialsUpdatedEvent.InputTuple,
      FinancialsUpdatedEvent.OutputTuple,
      FinancialsUpdatedEvent.OutputObject
    >;

    "LuxuryTaxAssessed(uint256,uint256)": TypedContractEvent<
      LuxuryTaxAssessedEvent.InputTuple,
      LuxuryTaxAssessedEvent.OutputTuple,
      LuxuryTaxAssessedEvent.OutputObject
    >;
    LuxuryTaxAssessed: TypedContractEvent<
      LuxuryTaxAssessedEvent.InputTuple,
      LuxuryTaxAssessedEvent.OutputTuple,
      LuxuryTaxAssessedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SalaryCapped(uint256,uint256,uint256)": TypedContractEvent<
      SalaryCappedEvent.InputTuple,
      SalaryCappedEvent.OutputTuple,
      SalaryCappedEvent.OutputObject
    >;
    SalaryCapped: TypedContractEvent<
      SalaryCappedEvent.InputTuple,
      SalaryCappedEvent.OutputTuple,
      SalaryCappedEvent.OutputObject
    >;

    "ViolationPaid(uint256,uint256)": TypedContractEvent<
      ViolationPaidEvent.InputTuple,
      ViolationPaidEvent.OutputTuple,
      ViolationPaidEvent.OutputObject
    >;
    ViolationPaid: TypedContractEvent<
      ViolationPaidEvent.InputTuple,
      ViolationPaidEvent.OutputTuple,
      ViolationPaidEvent.OutputObject
    >;
  };
}
