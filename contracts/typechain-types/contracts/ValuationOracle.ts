/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ValuationOracle {
  export type PerformanceMetricsStruct = {
    racePosition: BigNumberish;
    points: BigNumberish;
    fastestLap: BigNumberish;
    polePosition: BigNumberish;
    dnf: BigNumberish;
    overtakes: BigNumberish;
    consistency: BigNumberish;
  };

  export type PerformanceMetricsStructOutput = [
    racePosition: bigint,
    points: bigint,
    fastestLap: bigint,
    polePosition: bigint,
    dnf: bigint,
    overtakes: bigint,
    consistency: bigint
  ] & {
    racePosition: bigint;
    points: bigint;
    fastestLap: bigint;
    polePosition: bigint;
    dnf: bigint;
    overtakes: bigint;
    consistency: bigint;
  };

  export type ValuationDataStruct = {
    performanceScore: BigNumberish;
    sponsorValueUSD: BigNumberish;
    demandValueUSD: BigNumberish;
    marketValue: BigNumberish;
    timestamp: BigNumberish;
    isValid: boolean;
  };

  export type ValuationDataStructOutput = [
    performanceScore: bigint,
    sponsorValueUSD: bigint,
    demandValueUSD: bigint,
    marketValue: bigint,
    timestamp: bigint,
    isValid: boolean
  ] & {
    performanceScore: bigint;
    sponsorValueUSD: bigint;
    demandValueUSD: bigint;
    marketValue: bigint;
    timestamp: bigint;
    isValid: boolean;
  };
}

export interface ValuationOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEMAND_WEIGHT"
      | "DNF_PENALTY"
      | "FASTEST_LAP_BONUS"
      | "PERFORMANCE_WEIGHT"
      | "POINTS_MULTIPLIER"
      | "POLE_BONUS"
      | "SPONSOR_WEIGHT"
      | "WIN_MULTIPLIER"
      | "addAuthorizedUpdater"
      | "authorizedUpdaters"
      | "batchRecordPerformance"
      | "getPerformanceMetrics"
      | "getValuation"
      | "owner"
      | "performanceMetrics"
      | "recordPerformance"
      | "removeAuthorizedUpdater"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateDemandValue"
      | "updateSponsorValue"
      | "valuations"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "PerformanceRecorded"
      | "ValuationUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEMAND_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DNF_PENALTY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FASTEST_LAP_BONUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERFORMANCE_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POINTS_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POLE_BONUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SPONSOR_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WIN_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAuthorizedUpdater",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedUpdaters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchRecordPerformance",
    values: [BigNumberish[], ValuationOracle.PerformanceMetricsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPerformanceMetrics",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getValuation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performanceMetrics",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recordPerformance",
    values: [BigNumberish, ValuationOracle.PerformanceMetricsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthorizedUpdater",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDemandValue",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSponsorValue",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "valuations",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEMAND_WEIGHT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DNF_PENALTY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FASTEST_LAP_BONUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERFORMANCE_WEIGHT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POINTS_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "POLE_BONUS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SPONSOR_WEIGHT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WIN_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAuthorizedUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedUpdaters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchRecordPerformance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPerformanceMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValuation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performanceMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordPerformance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorizedUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDemandValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSponsorValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "valuations", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PerformanceRecordedEvent {
  export type InputTuple = [
    driverId: BigNumberish,
    racePosition: BigNumberish,
    points: BigNumberish,
    fastestLap: boolean,
    polePosition: boolean
  ];
  export type OutputTuple = [
    driverId: bigint,
    racePosition: bigint,
    points: bigint,
    fastestLap: boolean,
    polePosition: boolean
  ];
  export interface OutputObject {
    driverId: bigint;
    racePosition: bigint;
    points: bigint;
    fastestLap: boolean;
    polePosition: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValuationUpdatedEvent {
  export type InputTuple = [
    driverId: BigNumberish,
    performanceScore: BigNumberish,
    sponsorValueUSD: BigNumberish,
    demandValueUSD: BigNumberish,
    marketValue: BigNumberish
  ];
  export type OutputTuple = [
    driverId: bigint,
    performanceScore: bigint,
    sponsorValueUSD: bigint,
    demandValueUSD: bigint,
    marketValue: bigint
  ];
  export interface OutputObject {
    driverId: bigint;
    performanceScore: bigint;
    sponsorValueUSD: bigint;
    demandValueUSD: bigint;
    marketValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ValuationOracle extends BaseContract {
  connect(runner?: ContractRunner | null): ValuationOracle;
  waitForDeployment(): Promise<this>;

  interface: ValuationOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEMAND_WEIGHT: TypedContractMethod<[], [bigint], "view">;

  DNF_PENALTY: TypedContractMethod<[], [bigint], "view">;

  FASTEST_LAP_BONUS: TypedContractMethod<[], [bigint], "view">;

  PERFORMANCE_WEIGHT: TypedContractMethod<[], [bigint], "view">;

  POINTS_MULTIPLIER: TypedContractMethod<[], [bigint], "view">;

  POLE_BONUS: TypedContractMethod<[], [bigint], "view">;

  SPONSOR_WEIGHT: TypedContractMethod<[], [bigint], "view">;

  WIN_MULTIPLIER: TypedContractMethod<[], [bigint], "view">;

  addAuthorizedUpdater: TypedContractMethod<
    [updater: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizedUpdaters: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  batchRecordPerformance: TypedContractMethod<
    [
      driverIds: BigNumberish[],
      metricsArray: ValuationOracle.PerformanceMetricsStruct[]
    ],
    [void],
    "nonpayable"
  >;

  getPerformanceMetrics: TypedContractMethod<
    [driverId: BigNumberish],
    [ValuationOracle.PerformanceMetricsStructOutput],
    "view"
  >;

  getValuation: TypedContractMethod<
    [driverId: BigNumberish],
    [ValuationOracle.ValuationDataStructOutput],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  performanceMetrics: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        racePosition: bigint;
        points: bigint;
        fastestLap: bigint;
        polePosition: bigint;
        dnf: bigint;
        overtakes: bigint;
        consistency: bigint;
      }
    ],
    "view"
  >;

  recordPerformance: TypedContractMethod<
    [driverId: BigNumberish, metrics: ValuationOracle.PerformanceMetricsStruct],
    [void],
    "nonpayable"
  >;

  removeAuthorizedUpdater: TypedContractMethod<
    [updater: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateDemandValue: TypedContractMethod<
    [driverId: BigNumberish, demandValueUSD: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateSponsorValue: TypedContractMethod<
    [driverId: BigNumberish, sponsorValueUSD: BigNumberish],
    [void],
    "nonpayable"
  >;

  valuations: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean] & {
        performanceScore: bigint;
        sponsorValueUSD: bigint;
        demandValueUSD: bigint;
        marketValue: bigint;
        timestamp: bigint;
        isValid: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEMAND_WEIGHT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DNF_PENALTY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FASTEST_LAP_BONUS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PERFORMANCE_WEIGHT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "POINTS_MULTIPLIER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "POLE_BONUS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SPONSOR_WEIGHT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WIN_MULTIPLIER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addAuthorizedUpdater"
  ): TypedContractMethod<[updater: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedUpdaters"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "batchRecordPerformance"
  ): TypedContractMethod<
    [
      driverIds: BigNumberish[],
      metricsArray: ValuationOracle.PerformanceMetricsStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPerformanceMetrics"
  ): TypedContractMethod<
    [driverId: BigNumberish],
    [ValuationOracle.PerformanceMetricsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getValuation"
  ): TypedContractMethod<
    [driverId: BigNumberish],
    [ValuationOracle.ValuationDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "performanceMetrics"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        racePosition: bigint;
        points: bigint;
        fastestLap: bigint;
        polePosition: bigint;
        dnf: bigint;
        overtakes: bigint;
        consistency: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "recordPerformance"
  ): TypedContractMethod<
    [driverId: BigNumberish, metrics: ValuationOracle.PerformanceMetricsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeAuthorizedUpdater"
  ): TypedContractMethod<[updater: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateDemandValue"
  ): TypedContractMethod<
    [driverId: BigNumberish, demandValueUSD: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateSponsorValue"
  ): TypedContractMethod<
    [driverId: BigNumberish, sponsorValueUSD: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "valuations"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean] & {
        performanceScore: bigint;
        sponsorValueUSD: bigint;
        demandValueUSD: bigint;
        marketValue: bigint;
        timestamp: bigint;
        isValid: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PerformanceRecorded"
  ): TypedContractEvent<
    PerformanceRecordedEvent.InputTuple,
    PerformanceRecordedEvent.OutputTuple,
    PerformanceRecordedEvent.OutputObject
  >;
  getEvent(
    key: "ValuationUpdated"
  ): TypedContractEvent<
    ValuationUpdatedEvent.InputTuple,
    ValuationUpdatedEvent.OutputTuple,
    ValuationUpdatedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PerformanceRecorded(uint256,uint256,uint256,bool,bool)": TypedContractEvent<
      PerformanceRecordedEvent.InputTuple,
      PerformanceRecordedEvent.OutputTuple,
      PerformanceRecordedEvent.OutputObject
    >;
    PerformanceRecorded: TypedContractEvent<
      PerformanceRecordedEvent.InputTuple,
      PerformanceRecordedEvent.OutputTuple,
      PerformanceRecordedEvent.OutputObject
    >;

    "ValuationUpdated(uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ValuationUpdatedEvent.InputTuple,
      ValuationUpdatedEvent.OutputTuple,
      ValuationUpdatedEvent.OutputObject
    >;
    ValuationUpdated: TypedContractEvent<
      ValuationUpdatedEvent.InputTuple,
      ValuationUpdatedEvent.OutputTuple,
      ValuationUpdatedEvent.OutputObject
    >;
  };
}
